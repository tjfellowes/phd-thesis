%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H2) Quartz PS Context)
%%Title: ebs-synthesis.eps
%%Creator: ChemDraw(tm) 19.0.0.26
%%CreationDate: 2020-10-21 02:09:44 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 490 53
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2019 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 490 53
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FUXDAX+Helvetica
%!FontType1-1.0: FUXDAX+Helvetica 1.0000.0.0000
14 dict begin
/FontName /FUXDAX+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /N put
dup 34 /H put
dup 35 /two put
dup 36 /C put
dup 37 /O put
dup 38 /S put
dup 39 /e put
dup 40 /one put
dup 41 /period put
dup 42 /space put
dup 43 /a put
dup 44 /comma put
dup 45 /l put
dup 46 /c put
dup 47 /t put
dup 48 /D put
dup 49 /M put
dup 50 /F put
dup 51 /A put
dup 52 /r put
dup 53 /hyphen put
dup 54 /T put
dup 55 /E put
dup 56 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<






C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532011302153201190A1B320011041B32002B2B2B2B012B2B2B2B2B2B2B2B81005D0017161110070221202726111037122100123510002322001114122103049BBB92A7C4FE95FEADC2AD94BE0174011BEBFEF1EBE4FEE0F701150E05E5FAC3FED0FEB7DAFF00E0D8014A012AD40110FAA20179F50103013CFEC7FECFF4FEB1055E000200B40000057805BD0009002700944012070D49014805590158056905641478050816BB01300119001B011C40422321202660127112751403121E1F141C1503211E161404261224251E0009091B071E0B02261C1B082025151F251603310F691B1A29082625270A192829D6219566182B2B4EF43C4DFD3C4E10F64DF4EDD4EDD4ED003F3C3C3FFD12392F3CFD3C3911173901111239391239395D1112392B3130015D013236353427262321110321321716151406071E011F011617161715232E012F012627262321112303478CA3723D66FE1AC702A8A86DCF6D6256570507030B122EF40A0C040C0764397AFE3BC7031C70929D391EFE0A02A1315EFD84A833237280C55429461421133C56F590311BFD8A00020060FFD504F605E5002F003000FE405E290F27232626360E3521472662267A0E7724096B08180E172502590E680EAA22030A0E3A2224220A03041C1886142F2F2B1C3A1403043A2B0930020A0E081124221F28303011182517490825281A321F25114900252F193132A0216A89182B2B4EF44DEDF4ED4E10F64DEDF4ED12392F1211393912113939003F3FED3FED12392F10ED111217392EFD335D7131304379404D282E111F0008022602262D2506251A26032C002B002D2E032C002B00052A082B011D131F2B001B15182B011918012D042B0009270B2B01250B012E042B000729042B001E121C2B0119161C2B01002B2B2B2B10102B2B01103C2B2B2B2B103C2B2B2B2B2B2B818181005D0116171633323736353427262F012627263534243332041523262726232206151417161F01161716151404232027263701011E073463FA705CB24B4CA2C7C3518C0112FBE70143BB0F315BDAB09A5A3BD0CE95518CFE9DEBFEEE9B9B03024D01DA7D4E92203EA0783332252D2C355CB7C6FEDFF5763F7394626C3220302F223B67C4F4D28C8BEE040B0000010021000004C905BD00070034401A01061E00070204080917171A00FB0203250504FB0619088C5E182B4E10F44DF43CFD3CF44E456544E6003F3F3C4DFD3C3130011521112311213504C9FE11CAFE1105BDAFFAF2050EAF00000000030052FFDC04470449000F003B003C00DD4038

2E501C100123010601020142FE26754682B38A01DC000000000100890000013D05BD0003002940150000030A0517171A0102290003190405AA216242182B2B4EF43C4DFD3C4E456544E6003F3F31301333112389B4B405BDFA430000000100890000029204470011004F40262703260D37034704040E0810020E0911090C270805070006110A081A13012E10291100191213B80145B321627E182B2B4EF43C4DFDE44E10E6003F3F4D3FC4FDC411123939011112393130005D1333153E0133321617152E0123220615112389AB15A46B05181D101B108892B4042FB9369B0203BE0302AF72FD980000010017FFEF0209055A00180052B50D2E0AC00E01B8013F40250416391703060E0A111A17171A0301062900150E150F031F030203FC1619191AFC21677D182B2B4EF44DFD5D39C42F3CFD3C104E456544E6002F3F3F3C4DFD3CED10FDE431301333113315231114171633323637150E012322263511233533A8B6ABAB2615310D1E141F43277E5A9191055AFED593FD4538130B01028E0908816702C59300000001006F0000059806600030007EB8005D2BBB001101BD001F00612BBB000C01BC000D00612BBB000501BC000600612BBB000001BD000100612BB8000D10B80023D0B8000C10B80025D0B8000610B8002AD0B8000510B8002CD000B800242FB8002B2FB801B64558B800172F1BB9001701BE3E59B9001501B9F4B80019D0B800192FB8001AD0B8001A2F3031012334022711231126232207112311060215141216332115213533352E023534123637353315363332173533151E01120598C37C9471252F2D2371947C79E69D01D1FBDBDF6B934971D28D71321E1E36718FD37102D3D5011939FDD9023D0907FDC1022539FEE8D49EFF0095A09A0831BDEB77900115CE2AD1BA0404BAD12ACBFEE00000000100000000000067A8FFCC5F0F3CF500110800000000005F4D8F0000000000D8B9A29BF865FC270B9108F9000000090001000000000000000100000629FE2900000C01F865FCED0B9100010000000000000000000000000000001A0512004202390000023900AA02AA0055023900AF047300C4047300400556001E05C7005A05C700A5055600AF04E300AF05C700A106AA009705C7009C0639005005C700B40556006004E30021047300520400003B0473004801C7008902AA00890239001705EE006F0000003600360068008600A600CC015801960226028802CC02FE033603C204180496052005EC061A06E4076608300852089808E80970000000010000001A006F0009006B00070002001000100067000007E80B9000040001B8005D2B01BA000501B9005F2B01BF01BB003E00340029001D0012000000652BBF01BC004200340029001D0012000000652BBF01BD003A00340029001D0012000000652B00BF01B7004D003D

6953427374B8019A2045694B20B02853B049515A58B020615944B801A620456944750000
00>] def
/CharStrings 26 dict dup begin
/.notdef 0 def
/space 1 def
/comma 2 def
/hyphen 3 def
/period 4 def
/one 5 def
/two 6 def
/A 7 def
/C 8 def
/D 9 def
/E 10 def
/F 11 def
/H 12 def
/M 13 def
/N 14 def
/O 15 def
/R 16 def
/S 17 def
/T 18 def
/a 19 def
/c 20 def
/e 21 def
/l 22 def
/r 23 def
/t 24 def
/uni20BE 25 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1947 -985 2961 2297} readonly def
/UniqueID 4065484 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E4F2B7E4857BF54BFC4169B6E3076DA51F266F2CFA07F908C9D988D40261A45EB0D90420B80E7F3B99BE7BBB1201F9770869AC8EFCECCC4B6EE12DEA68B5442C5D049DA34EDD516C995344A823FBF7933DE11314C3B4B2245091AEBE006C5CCD11311744DFE8180B7E8B123C519E4000ACBA9AF4CDE73BA630A2B1D8DCB2DE1329B655D4C0E96934D8C737BAF78A2BB9D01BF052B0E32CA9FF3BD607392536FE6BC1AAAB0529D8E26F420857845E5A869375440718E77280F6946BF130A6701649543C3707C69572123EDC01ACFADD5FBD0E3ACAA1AC1B2266FA181F5DC5B46BFE7A4053C8BAF8C1E5B1FD8DE47072C9599F9F5E1D76B869CB12044D56A4B68F36AA28CF828343999E904297461A0828BF58BB2E8B19675DD02A878D9423BFFC63CD028EAC3BE801CBD8844BDD7E078879D6B5EE62601E1979DA6D255E4E96F22D81C90DA7EFAAC31F7BB1AE2AA019A9D6436E82AA46A2C3C776394C62B2FB2086FD0D1180B194AF90D0519284DB7DA239D1E77868A2F14407C523B36E2958ED23FA6FE77964B581685EC9A3C84F8F60309E611810EE031EBEF61E09C73F780A577A1C6570DF2F3BD77EB34AB65FC75C5F23DE07B85E04F9F614F92F19F673D82E328394D9F312163518A70D7879CF723A845FEB7DD243A26CAC7F95203912CD8EFAD41A416E788651D9B68699804DEE52BD93DA0473A5E1D88DF5FAD796B90D1376C0B55DB0CC822ACCF90E3C9A2306528161A3D2818E5D232B7B9D393D1185B8D190

03453A217AD348D31330DFE411697DAAAEBCE6D25EBFF4D5CA37C37BB12A62E5A81C348757AD4D82BBDEDFE9B9D7518035BA175E986EB29D6878C7909C6C207036EA2E0CB52C312E841B94181C7D99812D6D3775BEEE716132ADDB7F103E0EAFDB5A179788F249D97CE0346E93F1EFF23FB917786F94E36C011326A2F43C535A8CC6FE26E01B1AE85ADE32A97BC4A1357DC7CF6170CFF9D358EBD390EA58B7F55E8A9A6372A8CDAC02A4B7A53D81A9B6488B7046CCC75B6DDAB3EC85552B247A4E3A10D6163C13823633013F7FA788D573B1DC7147756BCBB805ECFEF19746FAFD01D0200AE8BBBBB4281C3B601FDBA44008AD538B300AF9A4AF6206D35D487368FBA570AABF949CE0105EF24A68F0235FC971B915E65068DA06AF5E275AB4ADD6F5B1CF1C13F6342B0E6C680EAB978DC6A8D9051BB4F2B565B4874E47862C55405099418C1BC4AFE952FBC88BC49111CCAC718FA22A5A7C2BF43A49B99E6DF1A63D9EB5F5B4DE4D5A08D6639BD08C95134B9348CFA22CEC7C9604B7BE6EE464C6A9A8C36754BC99D8EC4236B27DA7E83A03B843DD13C9B35F49B65D5FD1B6A80CA654DC9619B989E72199FCAE9626DB5C109B566325F834823011FBE293055F3AFDA2BEC8EADFF575EAA725143FD1BFD9934E5DD2C77DD2A6DA6C4D916590FD08732BCD5AE9102573A4CCE6543935D8A4A632C8DC9A62DE91BAFB60D143B02177CBC0A831902118A2C0C32521268E6EDCA6EB04F4AE9F7A92AC9E0CFDB8CA00F53F0362F14F53C29BD53E0E788112EBA64BEDC217DA6211468003D3F627CB470510C1D9C543B46099BA9A1FBA015E803C0F8C8240033F04450616999E9B6AC152FA85B59CE35F39856A9F4F8B491C2BCC08F09AC831DD9D05F6CAAADB18A0A1A0CB2F20E8D5A53441F0A1D72F2E3C2E41CBF4E4DAC196D65A8E299DE6B5C65DFE2964AF4E3EDEDC50594B0DC51B4660C24A73415DF1F8B458AAB6D6BCD8DC8B5C97AA7B4D9FCEDFA41B0340445B89AA824071A29E2CA8D62260B7F2B96E08C579335A813EA35613F63A1FE9B06EBC782FFE561D0C85FD7CBB2E79D19D68FA739D525E9E6F0262DA1B91ECB59E023DA7AFC91EB430BB3ABFBEBCEFAEB28EEEB912FE51CB624677B0814854058793753CA7296DF8B0D2A27FBFA60F12017E25E00CA15ACA3D5EB654EB002FB082CF5133206B502AC4F6432997745E2E774AB3C2FAC42B7FAFB9B0D06D40E7C05C16E26FA30ACE4971F03BCF1EEDF07BA974F012CE8902011BEE12240BB62EB858D43F9923DBB6A0839283B7DD8712898DEB72632774A89614FFDF1BB880AFF6E80849527079C3AE824B6B08A218A383F6B65F758CB8CBFFE0DD29B71362D9BED51B99A5AE4E101E89B2D562CF922606A3AABBC5ABDB86C254922255A6BD58C15B8C7E91B4E472CCB02B20CB0CE8047F87961328
5FC7A8959A28A3D378F824B479FF1F6E73C96700580E47ADD6E26D55CC2E0BA79686EE13C05A0F3984E7F19E9A438EF1506F0F84097C2EDC1546113141848E5159753F0290EC832907D306390130DB38DA269B40E3894AA74EFFD86134EDE79573EE769E97F1192BCF1C3B232C23BDE0DA72CDE8EC4CFB2D7730E5E132BB58C4D5B1B95967CEE39F19B44A64A408F9D7B5EF902E78DB5F86B8B771BA95501744A32228A2079EB0E435400A8CCB711776F97BA3F93A42F91B77E70E217E978F80E0B78CFE2D11F047AAD4D3F903EBFF44DA15589E1385269771FFD243072CE821A30357EE74F46C9AFE9419F1BE6F19561C6AE0BD796CA5C63AEEBE7434163F897F5983A3E943188E829A7A975C838168EE1F0DA1371D0298092D13005351B5F027EFB97306CEBE5FF2D5EF838D9CBF62925261934A99557F99C022E8B3583CBCD03C8731BE7EB57C259B3DEE6736907601CB0EC6A979EAFC9FDE5DEA4B6F417EFBBCEC454D295007180E0CF5F710823CECD9AC3E07C7061C307945DCA1D2947C41AA3C6A2A159FE4ECDC1C38F23A8269DDF8A3A58F9C68E50B1AB096E1C17B2995E9A317B21ADC0E6FE5AFBE1ABF27ED95BD9D996CE12465EB1CB49F8BE59AACD60E5EEEFE16FD5678B0EB550FEB812D2A6151CE36DCB9C892C6780297863B711F824176460940E06FE5C5D303C3D226DCAE6B240B31F1C98197FDD0A20733BB26FA9873423C5FD74CB42251FE5064888E8CB9A045EEF91A0A391AB3B4BFA742A8E373F075BD6AA7B42E67CDCFE92C0FDCA7D47063CA0740E639132E1E32C7B6AC69F0BB8AB6E0F899B3A475AE9408CA395A24EDF359FAF2DB8865F504C2747B9868AF1C77005AEE77
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FUXDAX+Helvetica cguidfix
/F1.1/FUXDAX+Helvetica renmfont
%%EndPageSetup
0.60000002 i
0.00014187396 0.00017728657 0 0 setcmykcolor
q
0 0 490 53 rc
-0.050000001 53 m
490.04999 53 l
490.04999 -0.050000001 l
-0.050000001 -0.050000001 l
h
f
0.73725492 0.70588237 0.64313728 0.87058824 setcmykcolor
3.3334308 19.624939 m
2.7318683 19.277626 l
2.7318683 34.023376 l
3.3334308 33.676064 l
3.3334308 19.624939 l
h
f
5.9251494 20.947613 m
5.3235869 20.947613 l
5.3235869 32.35339 l
5.9251494 32.35339 l
5.9251494 20.947613 l
h
f
15.502062 12.599376 m
15.502062 11.904751 l
2.7318683 19.277626 l
3.3334308 19.624939 l
15.502062 12.599376 l
h
f
27.670694 19.624939 m
27.971476 19.451283 l
27.971476 19.10397 l
15.502062 11.904751 l
15.502062 12.599376 l
27.670694 19.624939 l
h
f
25.229366 21.208096 m
25.530148 20.687128 l
15.652452 14.984239 l
15.351671 15.505207 l
25.229366 21.208096 l
h
f
27.670694 33.676064 m
27.971476 33.84972 l
28.272257 33.676064 l
28.272257 19.624939 l
27.971476 19.451283 l
27.670694 19.624939 l
27.670694 33.676064 l
h
f
15.502062 40.701626 m
15.502062 41.396252 l
27.971476 34.197033 l
27.971476 33.84972 l
27.670694 33.676064 l
15.502062 40.701626 l
h
f
15.351671 37.795795 m
15.652452 38.316765 l
25.530148 32.613876 l
25.229366 32.092907 l
15.351671 37.795795 l
h
f
3.3334308 33.676064 m
2.7318683 34.023376 l
15.502062 41.396252 l
15.502062 40.701626 l
3.3334308 33.676064 l
h
f
1 0 0 -1 36.830048 44.660366 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!")[ 7.221680 0.000000 ] xS
0.74512893 0.71195978 0.6486519 0.80928433 setcmykcolor
/F1.1[ 7.5 0 0 -7.5 0 0]sf
14.443359 9.4726562 m
(#)s
0.73725492 0.70588237 0.64313728 0.87058824 setcmykcolor
CM
35.186089 38.362392 m
35.48687 37.841423 l
28.272257 33.676064 l
27.971476 33.84972 l
27.971476 34.197033 l
35.186089 38.362392 l
h
f
1 0 0 -1 36.830048 15.961145 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.3681641 m
($%%")[ 7.221680 7.778320 7.778320 0.000000 ] xS
CM
36.223309 15.034395 m
35.922527 14.513427 l
27.971476 19.10397 l
27.971476 19.451283 l
28.272257 19.624939 l
36.223309 15.034395 l
h
f
167.5824 26.196692 m
81.187859 26.196692 l
81.187859 26.796692 l
167.5824 26.796692 l
h
f
172.79607 26.496693 m
172.79607 26.496693 166.78044 24.942785 166.78044 24.942785 c
166.78044 24.942785 167.53239 25.816858 167.53239 26.496693 c
167.53239 27.1984 166.78044 28.100599 166.78044 28.100599 c
166.78044 28.100599 172.79607 26.496693 172.79607 26.496693 c
172.79607 26.496693 172.79607 26.496693 172.79607 26.496693 c
h
f
188.49762 16.588268 m
187.89606 16.240955 l
187.89606 30.986706 l
188.49762 30.639393 l
188.49762 16.588268 l
h
f
191.08934 17.910942 m
190.48778 17.910942 l
190.48778 29.316719 l
191.08934 29.316719 l
191.08934 17.910942 l
h
f
200.66626 9.562706 m
200.66626 8.8680811 l
187.89606 16.240955 l
188.49762 16.588268 l
200.66626 9.562706 l
h
f
212.83488 16.588268 m
213.13567 16.414612 l
213.13567 16.067301 l
200.66626 8.8680811 l
200.66626 9.562706 l
212.83488 16.588268 l
h
f
210.39357 18.171425 m
210.69435 17.650457 l
200.81665 11.947567 l
200.51587 12.468535 l
210.39357 18.171425 l
h
f
212.83488 30.639393 m
213.13567 30.813049 l
213.43645 30.639393 l
213.43645 16.588268 l
213.13567 16.414612 l
212.83488 16.588268 l
212.83488 30.639393 l
h
f
200.66626 37.664955 m
200.66626 38.359581 l
213.13567 31.160362 l
213.13567 30.813049 l
212.83488 30.639393 l
200.66626 37.664955 l
h
f
200.51587 34.759129 m
200.81665 35.280094 l
210.69435 29.577206 l
210.39357 29.056236 l
200.51587 34.759129 l
h
f
188.49762 30.639393 m
187.89606 30.986706 l
200.66626 38.359581 l
200.66626 37.664955 l
188.49762 30.639393 l
h
f
1 0 0 -1 222.27011 41.721352 cm
0 7.3681641 m
(&')[ 6.669922 0.000000 ] xS
CM
220.98286 35.690941 m
221.28365 35.169971 l
213.43645 30.639393 l
213.13567 30.813049 l
213.13567 31.160362 l
220.98286 35.690941 l
h
f
1 0 0 -1 221.99423 12.924476 cm
0 7.3681641 m
($%%")[ 7.221680 7.778320 7.778320 0.000000 ] xS
CM
221.36584 12.010226 m
221.06506 11.489258 l
213.13567 16.067301 l
213.13567 16.414612 l
213.43645 16.588268 l
221.36584 12.010226 l
h
f
240.00351 38.313049 m
240.00351 37.711487 l
235.64043 37.711487 l
235.64043 38.313049 l
240.00351 38.313049 l
h
f
12 w
1 J
0.050000001 0 0 -0.050000001 -15 81 cm
5002.8911 678.2616 m
5067.7324 795.23828 5065.2417 937.92151 4996.3574 1052.564 c
S
1 0 0 -1 239.35768 34.070518 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 8.0749512 m
(#)s
1 0 0 -1 96.037857 47.623257 cm
/F1.1[ 8 0 0 -8 0 0]sf
0 6.1601562 m
(\(\)*!+!%)[ 4.449219 2.222656 2.222656 5.777344 4.449219 5.777344 0.000000 ] xS
/F1.1[ 6 0 0 -6 0 0]sf
31.121094 8 m
(#)s
/F1.1[ 8 0 0 -8 0 0]sf
34.458008 6.1601562 m
(,*"$-)[ 2.222656 2.222656 5.777344 5.777344 0.000000 ] xS
0 14.894531 m
(#\)*!+)[ 4.449219 2.222656 2.222656 5.777344 0.000000 ] xS
/F1.1[ 6 0 0 -6 0 0]sf
19.121094 16.734375 m
(#)s
/F1.1[ 8 0 0 -8 0 0]sf
22.458008 14.894531 m
(&')[ 5.335938 0.000000 ] xS
/F1.1[ 6 0 0 -6 0 0]sf
32.243164 16.734375 m
(#)s
/F1.1[ 8 0 0 -8 0 0]sf
35.580078 14.894531 m
(,*!+%")[ 2.222656 2.222656 5.777344 4.449219 6.222656 0.000000 ] xS
CM
359.32373 26.196692 m
266.35205 26.196692 l
266.35205 26.796692 l
359.32373 26.796692 l
h
f
364.53741 26.496693 m
364.53741 26.496693 358.52179 24.942785 358.52179 24.942785 c
358.52179 24.942785 359.27374 25.816858 359.27374 26.496693 c
359.27374 27.1984 358.52179 28.100599 358.52179 28.100599 c
358.52179 28.100599 364.53741 26.496693 364.53741 26.496693 c
364.53741 26.496693 364.53741 26.496693 364.53741 26.496693 c
h
f
1 0 0 -1 281.20206 47.623257 cm
0 6.1601562 m
(\(\)*&%$-)[ 4.449219 2.222656 2.222656 5.335938 6.222656 5.777344 0.000000 ] xS
/F1.1[ 6 0 0 -6 0 0]sf
28.007812 8 m
(#)s
/F1.1[ 8 0 0 -8 0 0]sf
31.344727 6.1601562 m
(,*.+/\)*012)[ 2.222656 2.222656 4.000000 4.449219 2.222656 2.222656 2.222656 5.777344 6.664062 0.000000 ] xS
0 14.894531 m
(#\)*345!")[ 4.449219 2.222656 1.785156 5.335938 2.664062 2.664062 5.777344 0.000000 ] xS
/F1.1[ 6 0 0 -6 0 0]sf
30.675781 16.734375 m
(#)s
/F1.1[ 8 0 0 -8 0 0]sf
34.012695 14.894531 m
(,*673)[ 2.222656 2.082031 4.886719 5.335938 0.000000 ] xS
CM
380.23895 25.144604 m
379.63739 24.797291 l
379.63739 39.543041 l
380.23895 39.195728 l
380.23895 25.144604 l
h
f
382.83069 26.467278 m
382.22913 26.467278 l
382.22913 37.873055 l
382.83069 37.873055 l
382.83069 26.467278 l
h
f
392.40759 18.119041 m
392.40759 17.424416 l
379.63739 24.797291 l
380.23895 25.144604 l
392.40759 18.119041 l
h
f
404.57623 25.144604 m
404.87701 24.970947 l
404.91144 24.643505 l
392.40759 17.424416 l
392.40759 18.119041 l
404.57623 25.144604 l
h
f
402.13489 26.72776 m
402.43567 26.206793 l
392.55798 20.503902 l
392.2572 21.024872 l
402.13489 26.72776 l
h
f
404.57623 39.195728 m
404.87701 39.369385 l
405.1778 39.191231 l
405.1778 25.189478 l
404.87701 24.970947 l
404.57623 25.144604 l
404.57623 39.195728 l
h
f
392.40759 46.221291 m
392.40759 46.915916 l
404.88086 39.714478 l
404.87701 39.369385 l
404.57623 39.195728 l
392.40759 46.221291 l
h
f
392.2572 43.31546 m
392.55798 43.83643 l
402.43567 38.133541 l
402.13489 37.612572 l
392.2572 43.31546 l
h
f
380.23895 39.195728 m
379.63739 39.543041 l
392.40759 46.915916 l
392.40759 46.221291 l
380.23895 39.195728 l
h
f
1 0 0 -1 423.4231 35.781593 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 414.32654 50.084572 cm
0 7.3681641 m
(&')[ 6.669922 0.000000 ] xS
CM
418.45584 20.875175 m
418.68564 20.167995 l
404.91144 24.643505 l
404.87701 24.970947 l
405.1778 25.189478 l
418.45584 20.875175 l
h
f
423.15302 27.340265 m
423.63968 26.986677 l
418.68564 20.167995 l
418.45584 20.875175 l
423.15302 27.340265 l
h
f
421.13843 40.559509 m
421.64056 40.890797 l
423.86728 37.515846 l
423.36517 37.184555 l
421.13843 40.559509 l
h
f
405.1778 39.191231 m
404.87701 39.369385 l
404.88086 39.714478 l
412.99063 44.158764 l
413.27972 43.631226 l
405.1778 39.191231 l
h
f
441.2587 32.470947 m
441.43237 32.170166 l
441.2587 31.869385 l
431.48636 31.869385 l
431.48636 32.470947 l
441.2587 32.470947 l
h
f
448.80524 20.001535 m
448.45792 19.399973 l
441.2587 31.869385 l
441.43237 32.170166 l
441.77966 32.170166 l
448.80524 20.001535 l
h
f
450.3884 22.442863 m
449.86743 22.142082 l
444.16455 32.019775 l
444.68552 32.320557 l
450.3884 22.442863 l
h
f
462.85635 20.001535 m
463.20367 19.399973 l
448.45792 19.399973 l
448.80524 20.001535 l
462.85635 20.001535 l
h
f
469.88193 32.170166 m
470.22925 32.170166 l
470.40289 31.869385 l
463.20367 19.399973 l
462.85635 20.001535 l
469.88193 32.170166 l
h
f
466.9761 32.320557 m
467.49707 32.019775 l
461.79419 22.142082 l
461.27319 22.442863 l
466.9761 32.320557 l
h
f
462.85635 44.338799 m
463.20367 44.940361 l
470.40289 32.470947 l
470.22925 32.170166 l
469.88193 32.170166 l
462.85635 44.338799 l
h
f
448.80524 44.338799 m
448.45792 44.940361 l
463.20367 44.940361 l
462.85635 44.338799 l
448.80524 44.338799 l
h
f
450.1279 41.747078 m
450.1279 42.34864 l
461.53369 42.34864 l
461.53369 41.747078 l
450.1279 41.747078 l
h
f
441.77966 32.170166 m
441.43237 32.170166 l
441.2587 32.470947 l
448.45792 44.940361 l
448.80524 44.338799 l
441.77966 32.170166 l
h
f
1 0 0 -1 419.13095 10.53694 cm
0 7.3681641 m
(%)s
CM
422.87628 12.437355 m
422.30414 12.251462 l
419.22617 21.724499 l
419.79828 21.910391 l
422.87628 12.437355 l
h
f
420.41141 11.63647 m
419.83926 11.450577 l
416.76129 20.923613 l
417.33344 21.109507 l
420.41141 11.63647 l
h
f
1 0 0 -1 481.01685 35.781593 cm
0 7.1728516 m
(8)s
CM
480.29419 32.470947 m
480.29419 31.869385 l
470.40289 31.869385 l
470.22925 32.170166 l
470.40289 32.470947 l
480.29419 32.470947 l
h
f
ep
end
%%Trailer
%%EOF
