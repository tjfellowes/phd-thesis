%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.15.7 (Build 19H2) Quartz PS Context)
%%Title: neg-esi-ms.eps
%%Creator: ChemDraw(tm) 19.0.0.26
%%CreationDate: 2020-10-22 07:17:39 +0000
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 261 114
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: © 1985–2019 PerkinElmer Informatics, Inc.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 261 114
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HKZSAR+Helvetica
%!FontType1-1.0: HKZSAR+Helvetica 1.0000.0.0000
14 dict begin
/FontName /HKZSAR+Helvetica def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /N put
dup 34 /S put
dup 35 /e put
dup 36 /O put
dup 37 /hyphen put
dup 38 /C put
dup 39 /m put
dup 40 /slash put
dup 41 /z put
dup 42 /colon put
dup 43 /space put
dup 44 /three put
dup 45 /nine put
dup 46 /seven put
dup 47 /period put
dup 48 /zero put
dup 49 /one put
dup 50 /I put
dup 51 /D put
dup 52 /two put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1947 1 index div -985 2 index div 2961 3 index div 2297 5 -1 roll div]cvx def
/sfnts [<




2BBA0002000500562B3031331121112711211142048EB8FCE205BDFA43B8044DFBB300000001005501DE024B029700030020400A002F03011A0500190405B80142B321BA48182B2B4EE410E6002F4DED3130132115215501F6FE0A0297B90000000100AF0000018000DA000300264013012A030A0517171A01640019040564216365182B2B4EF44DFD4E456544E6003F4DED313037331523AFD1D1DADA000000000100000000026A05BD0003002B4017070117019701030102021C1203030002030A0100020003192F18D4003F3C3F3C05872E2B7D10C4015D0133012301D298FE2E9805BDFA430000020040FFD9041C0598000F001C00714017870501460815350F051C35070D1238036F18380B1E471D1076C418D4EDFDED003FED3FED313043794034001B0D2601251A2609250526160E18280014001228011B081828001006122801170C1528011302152801190A1C280011041C28002B2B2B2B012B2B2B2B2B2B2B2B2B81005D001716111007022120272611343712211236113402232202111417163303407C60577EFEE2FEFE7E693F7601358AA678AD9F932F48AE0598E5B1FECCFEDCBFFEEEE0BB013BF4AF0146FAE5F80152F4013BFED5FEDDDB85CB000000000100C4000002D5059200080023B10801B80133400C0404070C04079605000A47091076C418C4D5FD39003F3FF4CD313013353E013733112311C4C39A268EC003F68A1359A6FA6E03F60000000100400000041E059D002200A6404E3604460457056B1D6E1E7A1E84018702082A085A196B197C197C1CB519050022010F041C0E1921071C19040100051F0F0F22130A351305201F7521220C217F0738166F220E270F811F38222447231076C418D4EDF4ED10F5EDE4003F3CFD3C3FED1112392F1217390111123912393911391239005D31304379401C04190C2511260B120E2800091407280119040D100A280108150A2801002B2B1010012B2B2B2B81005D36123F01363736353426232207060723363736213212151407060F01060706072115214A85C1C0813452967DB9472604B70342750128F6E37946B5896238641A030EFC29B90112706F4B35536B7D938C4B85BB76D0FEF6A3AC7A47654C3631576AAA000000010031FFD9041A059A003100C4401F490C532D6529632D7529752D069626014B082B0A182B140D03F93114350D20B8012340141135107F0D0D311B3524050735310D1896274411B8014A400F0A382E6F021F2920810327023347321076C418D4EDF4ED10F5EDEDF4ED003FED3FED12392FF4FDE610ED10ED111239011112393130437940362F301926000905261D2522260600032800040308300A28011C231F28001A251828010401072800092F0728001E211B280119261B2801002B2B2B2B012B2B2B103C2B2B2B2B818181005D015D040235331617

16112515260607050704070307020705060A10083201011608320109120B320107140032002B2B012B2B2A2B2B815D2532373637363736351002232111032120171611140702290102D06541744A3B1A0FD9F1FE9FC80253012FA795589BFE86FDAFAA15276F598B53470111012EFB980513D7C2FED1EABDFEB20000000100C90000019205BD00030017B8002B2BBA00010000002E2B00B800002FB800022F303113331123C9C9C905BDFA430002009C0000052A05BD0009000A007640143701380602070117012701470158020507010202B8019B4017120606070207080301020806080A030A0A010608020302B8019BB505041A0C0708B8019B400A0900190B0CA0217670182B2B4EF43C4DFD3C4E10F63C4DFD3C11123939392F003F3F3C3F3C12393904872E2B877DC53130005D015D13330111331123011123019CEB02E6BDDFFD0FBE023A05BDFB5A04A6FA4304A5FB5B05BD000000030050FFD505E805E5000F001B001C008A402C8705C700C701C302C808C90A064308153A0F031B3A07091C021C1C0B1231031A1E18310B191D1ED8216A66182B2B4EF44DED4E10F64DED12392F003F3FED3FED313043794032001A0D26012509250526160E18320014001232011A081832001006123201170C1532011302153201190A1B320011041B32002B2B2B2B012B2B2B2B2B2B2B2B81005D0017161110070221202726111037122100123510002322001114122103049BBB92A7C4FE95FEADC2AD94BE0174011BEBFEF1EBE4FEE0F701150E05E5FAC3FED0FEB7DAFF00E0D8014A012AD40110FAA20179F50103013CFEC7FECFF4FEB1055E00020060FFD504F605E5002F003000FE405E290F27232626360E3521472662267A0E7724096B08180E172502590E680EAA22030A0E3A2224220A03041C1886142F2F2B1C3A1403043A2B0930020A0E081124221F28303011182517490825281A321F25114900252F193132A0216A89182B2B4EF44DEDF4ED4E10F64DEDF4ED12392F1211393912113939003F3FED3FED12392F10ED111217392EFD335D7131304379404D282E111F0008022602262D2506251A26032C002B002D2E032C002B00052A082B011D131F2B001B15182B011918012D042B0009270B2B01250B012E042B000729042B001E121C2B0119161C2B01002B2B2B2B10102B2B01103C2B2B2B2B103C2B2B2B2B2B2B818181005D0116171633323736353427262F012627263534243332041523262726232206151417161F01161716151404232027263701011E073463FA705CB24B4CA2C7C3518C0112FBE70143BB0F315BDAB09A5A3BD0CE95518CFE9DEBFEEE9B9B03024D01DA7D4E92203EA0783332252D2C355CB7C6FEDFF5763F7394626C3220302F223B67C4F4D28C8BEE040B0000030048FFDA041A0449001C00240025010C4079
9708991AA71F03050E020F0514150E120F1514400C401408291A014B0BB603C701C603C71BD808D909D61FD823E817E8230BC711C712025C080521240F9A161D243906070716211D1C070A1D160B2507971CA71CB71CD71C0425160F251C05190A0C07110E270F1D27051A27242E072719192627D421A65D182B2B4EF44DFDE44E10F64DEDD4FD391239391112393912392F5D003F3FED3FED12392F3CFD3C10ED1112393130437940460023040503050205010504061F26111012101310141004060C25221B24260020001D26011E1D09170726000B150E26010D0E231A2126011E0521260108180A26000D100A2600002B2B2B2B01103C2B2B103C2B2B2B2A2B2A8101715D00715D5D00161716171615211E013332373637330E01070607062322001110003301262726232206070102B4D638361210FCEF0590978D543014B1074F3152794152C8FEEA0118E2011F0B284AAD7CA805012304476B55516C4AA2A3C55D36473B912E501C100123010601020142FE26754682B38A01DC0000000001008400000625044700260085403B0708070E060F1708170E170F2708270E270F4819560B670B0C23250A1A1D23190A02041725211D171D0D060700061B1C2503130A2817171A112914B80101B21A291DB80101400A00012E25292600192728B8010DB3216242182B2B4EF43C4DFDE410F4EDF4FD4E456544E6003F173C3F3F3C4DEDED111217390111123912393130005D13331536373633321716173E01333217161511231134262322061511231134272623220615112384B240345971804E2C243CA265D84E2ABB6B4D6A99B71A297066A7B4042F984F243D3F244656539C548EFD3702E86B508EA6FD9102BB6D324B9ECFFDC80000020034000003B404490009000A006C4042370648005700580157066700680167067705090105060629120000010A0A01060503050102390403060007063908090A0A07053E071A0C034A00190B0CB221725D182B2B4EF44DE44E10F64DE4003F3F3CFD3C393F3CFD3C390111123939392F872E2B877DC53130015D370121352115012115210134027BFDB4033EFD89028AFC8001CF8E0300A193FD05A104490001006F0000059806600030007EB8005D2BBB001101BD001F00612BBB000C01BC000D00612BBB000501BC000600612BBB000001BD000100612BB8000D10B80023D0B8000C10B80025D0B8000610B8002AD0B8000510B8002CD000B800242FB8002B2FB801B64558B800172F1BB9001701BE3E59B9001501B9F4B80019D0B800192FB8001AD0B8001A2F3031012334022711231126232207112311060215141216332115213533352E023534123637353315363332173533151E01120598C37C9471252F2D2371947C79E69D01D1FBDBDF6B934971D28D71321E1E36718FD37102D3D5011939FDD9


00>] def
/CharStrings 22 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/period 3 def
/slash 4 def
/zero 5 def
/one 6 def
/two 7 def
/three 8 def
/seven 9 def
/nine 10 def
/colon 11 def
/C 12 def
/D 13 def
/I 14 def
/N 15 def
/O 16 def
/S 17 def
/e 18 def
/m 19 def
/z 20 def
/uni20BE 21 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1947 -985 2961 2297} readonly def
/UniqueID 4065484 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB281E0B8C08955DB50295DA0B1284D8D5B935DAA6F05584E2B8991A3710D32F061B813192FF69F85DABC915437238BB5761ADBB1AE2383A5258E250D5215E88FD1302A9AB6E9E0441BFC27F837E02965237D1905360F4A8408B9BDFF824BA39709D47A2668C2E22B7C72E4EBB0643F08948B8155284A7CEE2EF15D72EE2444AE54BDF1B56723C4BE8948FED4BC772650D44145A746B0583525B426AAAFB3973661D854577B462D2C10BB93CA86D88C7E6E1B56C007AE561D740CD7974FE45F186FD56C1246D00405BE62365A8030F2E77A9264CD2D4D13A09E4E90726D35E900BB985A339BDD215301253A00AB9296F7543968BFF0298B73549BAE2B083390566A85537423A99900AB6F24758E39EDB79D3514F3B98831CDE5812481849CA5C4CF6475AD596A9F9381E44D93EB1811F5D15B75B4E61E35592D185B9EAA770117C83D6120E5438C5D38D454ED8AC440417F9B28B39A2A94A6DCC1AEB84A8071F38F845444B950134EC2F351A6900ADE7B2B8ED896B29F553A918E5E2A833A45D6958199E3835503A92267DFC8E4E94E969EEEDDF14C4C1F677FD60CE9824F7BFBDF7739D121C381B255D42AFA6E3761B4210EF597975DA2F10E2EF863FC7DFD522D07AE12FB320643D992F362C10BD96F510E401730E3056334323F891E3C75CC1BDAD61634E678629CF0086D17E97C72E03128DDE6CDE6BF36313199576964D02B510965D26E5F646E74ACD72561BE739E46FFCD7919AE1345D2F26797424FAD3E7FD34BC4
348AC777F99B555575C484006411282F3A88BD444D669DFBFFE4ADCCA572E3130517A82665AE79356DC10A3907352A2A085F740D929EE34562F1419C6AB0EDA8FD748DCB05B3FD9515440A9DEFC188B4F42E12B44572E817D7FE3F3DF381595A7EE15A24EB45E8511A69C165CA5523A2387C1895B6607B0331CF08B83350F935E7BEA2321A6ACA43955AD0D1348A82F735224CE5A84C3BDE52DEF5607AA95062CF76EEB7DB861EC100070ED9E1B747F396BFE06A9D7AF27264979127F350A359D907739509E60981DD75421A6198F5F671D1A4439A8CE347EE17743F6A32251C3222CED013DA4A03E0B5F2F18A32EF984BAA1B1F4C3903E19D78E3F88010FBC31F8FB6C1E1515777912882A08CF351440B32E2C737632174C78BC14B6583AB2EF2B7949B2D1FED2449E7950E41CAD1BF02347C3F1C4D1C9ED763FE3D3FEC329DBB640B22143110C5EAAD73831E32668388F468C5B938AEB988FC725688C7C68F31FD48BC3FE9C0172CE497F4C4EB460BAC120E8016E3F36C05032FCA3141ADC2F2790724D972AEC255B8A9BCC969499664F02941E29938D93D5B60A33FEB898101FCABCFC595EEACD5034195900FD025D03FADD9B2A8561A1284FB090D0DF5C57D4D647AC145F2451EB164641100A0B11FC11ED775ACC105A6BA27B4E7523B1FAA5306378BDE9CD3D41ABEF70C6C736077994E3EEDF98A985FDC113A5E5C61AC5E4DC3C003BBA1581B19A140597DC309765EA38A6A635C9DF718590372220667F372E3C677E27C5ADC59D00D7243094F661BDDAC58DAE613F034C66AB8433CAD970E1F17CE3CB6736AEFF4AB93D9E4EF5D2700B39D615B12B4EED50653525EE0E2895E1FD510D8492B60EB1D253897B6A2963CF800A507D837488733900DD5A71D4976884F20EC42465DBFFBE1B44E22A4F204C9B6081F77081164E4946CB5C0833A90B01403E42068E38213D223328B4070DCA130974A70021E7F7700C681FF34B07C071EA219773B24C0B7B0F34B58857244D49B04A8F1FAEAD75BFC72A058C5D32D0E66D8AD00FFF37AEB5EC8975FFFAEAAB2D3A890DCD8E592CF510C4F126502B04CCAE3304327B11C0264B3B5F380F971C5CAF23F1B4F4D7F7B76B4DE800180383321FDAC403D3BAC21805D94ED3CB3E98444521B0D9B885633A1E67833235AA48E9E6666C0D6CCC9AAE636B64B67CCD4BF4E1F9CA14461F6FF6542F77EFA0AE694378C289F98474468D22D1305199CC44482A2F2740D8E189DF580F1CAA39802970ABA3279BC4A782253FDDC60B49019E14F7FD76085F58C8FA7C001BAA4412D35941F16AEBF3B99B81270F3F54DC71E284CACC6D7D00747E6B210FAD292DBAF0F81E8B658572A557291D6F2783E754C4E6DCCFEB97B13C7E34B11AFB1D83EAC6C422F496049A9AB9EEBA0B8D076AB233F53217C87E7D16423E753E39D
AEF3F031EEF1DB49ADCA34AD4D606298DDEF098283BB2395ECCFF80A6E7BF8133E4252B134BA2FBFBB86B0BFEAA202B7C3AC6A99AE2D941C7DFC97FA96737DD437E8136524AD2F047B55CFEB9F62E624BC22E0194F52A75BD9E30893E5240ABA3803E7D726F6A225CE0E6E93D45852843285A2602416F30BCC264B4B4D9210C0FD9F0798D5944F01EA56F89CDA1107A5BB714D48EFEB85E5AE85D2F7C44380DCF3778DDF53E09FAC4C8EF9F5522B9F0678F3FCF9F99D4602F8BAD9C8C95B47643FFB8FC5B42A0AABD7F00EB448182644F5E882059B61CC42BAF981030E25A15929F2EEB81376F2D05D6D61CF448D749BE8D9FC5581E57F4FE1A67CF6B336451C123C6413593E8467341022B710810BF73DF176F59187803CBC59DC6FADAF4BCE86BD00ED3F47E19F89D7B971D64E2711F2A54CA2C9FC02D588B56D73061AB43F37EF5FF641E7B3F5F40813269693AFE4DBC76C5C2232060B22AF2F8F9538D4CFFD7D9374292CFC93841DE621418A299E13194590D7AF6BB851514FFAEB085C2A0BBDB49F91E8998C34B4BE6307EAD21A51F3E5E9FC78D5F610B5192144658378269702EFE5C3C7D81F0D1C544F5FA58946765A810EBF6FEC5EC4BC8FB0514D168779CD40C4E1EB49D2777BD34D90070DB3C4BB6041CA6845CF6D26A16C51456F2AAA354FAB00CDC546185269AA6E17D502B990726B12192ECAF54ED668A1ECF9716A6B48544CC1DB1031A28026B31C2F9B24681682CABB6FE13826D72255C1883F0FEE66FFF3FB3E484088EEE408E69E6ECAC3E9020FD1B60A87FE9F34F2D186EDEE85E8919B54DCE019CE919CF328741C02F05FDA07C326D555C7DCB703E0FE143AE509B7F235C7239E4336460935E18DDD661E6ED15AC1C9824F55F9E4A1869A6F979C126CC9C6D5CBEC33E2A97701DBD1C1524E6DAEF3470D1635A9255E7235C466CA9980707DD8780DC6CB50EEDA58CD162DEA63D24518CE69BFAE50EF93957646A597D906DB8674AF4D9A17E87CEEE8EFF886EA7FFCCF3531A9D5411C773EF321B603A6A8EA0AF74427A71627577C8B2D42A544155DA369633A380F4F21FB1BFAF3EC1992E261EB5E4276AA77F2E766D6B933BA674156F9C4217811611A8DD05AFFB33DFB3E8984ACDBFCFF0E3A9E099C7A26B3FE19899606FCF0530E0047DDC0F1BF6CE9EDF2992396C25810C16485883F1E923FAE3A176CCA483D6F8ADDDCBC8756451FD703D26429B721DF347CF108221D2ACFD5C8295F3F79A119263E7516228103F4199004487D54148ADF58C75D2B94F73B93C10F69D7D9507B8C985C6E36CD9CD31F344666BEED570B312B40735BDF40C97F5490039992AD4467D1397FD264311D51591EFF58131B07FD2096331B4A829C0946161E936DA887FC7D4DF5350FF0558A74BBED5F35F68179884644B379185E79473C7D7268A5DD15

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HKZSAR+Helvetica cguidfix
/F1.1/HKZSAR+Helvetica renmfont
%%EndPageSetup
0.60000002 i
0.00014187396 0.00017728657 0 0 setcmykcolor
q
0 0 261 114 rc
-0.050000001 114 m
261.04999 114 l
261.04999 -0.050000001 l
-0.050000001 -0.050000001 l
h
f
0.73725492 0.70588237 0.64313728 0.87058824 setcmykcolor
37.721527 39.913937 m
37.119965 39.566624 l
37.119965 54.263943 l
37.721527 53.91663 l
37.721527 39.913937 l
h
f
40.304527 41.231575 m
39.702965 41.231575 l
39.702965 52.598991 l
40.304527 52.598991 l
40.304527 41.231575 l
h
f
49.848221 32.91259 m
49.848221 32.217964 l
37.119965 39.566624 l
37.721527 39.913937 l
49.848221 32.91259 l
h
f
61.974899 39.913937 m
62.275681 39.74028 l
62.310097 39.412838 l
49.848221 32.217964 l
49.848221 32.91259 l
61.974899 39.913937 l
h
f
59.54229 41.492058 m
59.843071 40.971092 l
49.998611 35.287384 l
49.69783 35.808353 l
59.54229 41.492058 l
h
f
61.974899 53.91663 m
62.275681 54.090286 l
62.576462 53.932659 l
62.576462 39.958809 l
62.275681 39.74028 l
61.974899 39.913937 l
61.974899 53.91663 l
h
f
49.848221 60.917976 m
49.848221 61.612602 l
62.261127 54.445999 l
62.275681 54.090286 l
61.974899 53.91663 l
49.848221 60.917976 l
h
f
49.69783 58.022213 m
49.998611 58.543182 l
59.843071 52.859474 l
59.54229 52.338509 l
49.69783 58.022213 l
h
f
37.721527 53.91663 m
37.119965 54.263943 l
49.848221 61.612602 l
49.848221 60.917976 l
37.721527 53.91663 l
h
f
1 0 0 -1 80.747223 50.526711 cm
/F1.1[ 10 0 0 -10 0 0]sf
0 7.1728516 m
(!)s
1 0 0 -1 68.399643 66.269981 cm
0 7.3681641 m
("#)[ 6.669922 0.000000 ] xS
CM
75.808449 35.659481 m
76.038231 34.952305 l
62.310097 39.412838 l
62.275681 39.74028 l
62.576462 39.958809 l
75.808449 35.659481 l
h
f
80.47715 42.085384 m
80.963821 41.731796 l
76.038231 34.952305 l
75.808449 35.659481 l
80.47715 42.085384 l
h
f
77.991844 56.469955 m
78.501022 56.790283 l
81.31295 52.320541 l
80.803772 52.000214 l
77.991844 56.469955 l
h
f
62.576462 53.932659 m
62.275681 54.090286 l
62.261127 54.445999 l
68.117577 58.499023 l
68.459915 58.004368 l
62.576462 53.932659 l
h
f
106.05671 34.788605 m
105.7094 34.187042 l
98.534401 46.614502 l
98.708054 46.915283 l
99.055367 46.915283 l
106.05671 34.788605 l
h
f
107.63483 37.221214 m
107.11387 36.920433 l
101.43016 46.764893 l
101.95113 47.065674 l
107.63483 37.221214 l
h
f
120.05941 34.788605 m
120.40672 34.187042 l
105.7094 34.187042 l
106.05671 34.788605 l
120.05941 34.788605 l
h
f
127.06075 46.915283 m
127.75538 46.915283 l
120.40672 34.187042 l
120.05941 34.788605 l
127.06075 46.915283 l
h
f
124.16499 47.065674 m
124.68596 46.764893 l
119.00225 36.920433 l
118.48129 37.221214 l
124.16499 47.065674 l
h
f
120.05941 59.041962 m
120.40672 59.643524 l
127.75538 46.915283 l
127.06075 46.915283 l
120.05941 59.041962 l
h
f
106.05671 59.041962 m
105.7094 59.643524 l
120.40672 59.643524 l
120.05941 59.041962 l
106.05671 59.041962 l
h
f
107.37435 56.458961 m
107.37435 57.060524 l
118.74177 57.060524 l
118.74177 56.458961 l
107.37435 56.458961 l
h
f
99.055367 46.915283 m
98.708054 46.915283 l
98.534401 47.216064 l
105.7094 59.643524 l
106.05671 59.041962 l
99.055367 46.915283 l
h
f
98.534401 47.216064 m
98.708054 46.915283 l
98.534401 46.614502 l
88.810501 46.614502 l
88.810501 47.216064 l
98.534401 47.216064 l
h
f
1 0 0 -1 76.468582 25.367315 cm
0 7.3681641 m
($)s
CM
80.209763 27.266384 m
79.637642 27.08049 l
76.575607 36.504444 l
77.147728 36.690338 l
80.209763 27.266384 l
h
f
77.753189 26.468191 m
77.181068 26.282297 l
74.119034 35.706253 l
74.691147 35.892147 l
77.753189 26.468191 l
h
f
1 0 0 -1 57.28035 85.891457 cm
0 7.1728516 m
(!)s
CM
36.253143 82.453682 m
35.651581 82.106377 l
35.651581 96.504814 l
35.952362 96.678467 l
36.253143 96.504814 l
36.253143 82.453682 l
h
f
38.844864 83.77636 m
38.243301 83.77636 l
38.243301 95.182137 l
38.844864 95.182137 l
38.844864 83.77636 l
h
f
48.421783 75.428123 m
48.421783 74.733498 l
35.651581 82.106377 l
36.253143 82.453682 l
48.421783 75.428123 l
h
f
55.636391 79.593483 m
55.937172 79.07251 l
48.421783 74.733498 l
48.421783 75.428123 l
55.636391 79.593483 l
h
f
54.340534 81.837975 m
54.641315 81.317009 l
48.572174 77.812981 l
48.271393 78.333954 l
54.340534 81.837975 l
h
f
60.590408 96.504814 m
61.191971 96.852119 l
61.191971 87.518021 l
60.590408 87.518021 l
60.590408 96.504814 l
h
f
48.421783 103.53037 m
48.421783 104.225 l
61.191971 96.852119 l
60.590408 96.504814 l
48.421783 103.53037 l
h
f
48.271393 100.62454 m
48.572174 101.14552 l
58.449863 95.442619 l
58.149082 94.921654 l
48.271393 100.62454 l
h
f
36.253143 96.504814 m
35.952362 96.678467 l
35.952362 97.02578 l
48.421783 104.225 l
48.421783 103.53037 l
36.253143 96.504814 l
h
f
1 0 0 -1 1.8179169 107.58677 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 3.7817383 m
(%)s
/F1.1[ 10 0 0 -10 0 0]sf
2.4975586 7.3681641 m
($$&)[ 7.778320 7.778320 0.000000 ] xS
CM
27.83124 101.01989 m
28.132021 101.54086 l
35.952362 97.02578 l
35.952362 96.678467 l
35.651581 96.504814 l
27.83124 101.01989 l
h
f
70.824005 68.432777 m
70.329079 68.090828 l
69.091637 69.881866 l
69.586555 70.223816 l
70.824005 68.432777 l
h
f
68.349106 72.014854 m
67.854187 71.672905 l
66.616737 73.463943 l
67.111664 73.805893 l
68.349106 72.014854 l
h
f
65.874214 75.596924 m
65.379288 75.254982 l
64.141838 77.046013 l
64.636765 77.387962 l
65.874214 75.596924 l
h
f
1 0 0 -1 38.00259 10.699347 cm
0 7.7001953 m
('\(\)*+,-./01)[ 8.330078 2.778320 5.000000 2.778320 2.778320 5.561523 5.561523 5.561523 2.778320 5.561523 0.000000 ] xS
CM
169.8 57.974293 m
148.18373 57.974293 l
148.18373 58.574291 l
169.8 58.574291 l
h
f
175.01367 58.274292 m
175.01367 58.274292 168.99805 56.720387 168.99805 56.720387 c
168.99805 56.720387 169.75 57.59446 169.75 58.274292 c
169.75 58.976002 168.99805 59.878197 168.99805 59.878197 c
168.99805 59.878197 175.01367 58.274292 175.01367 58.274292 c
175.01367 58.274292 175.01367 58.274292 175.01367 58.274292 c
h
f
1 0 0 -1 151.86627 71.260262 cm
0 7.7001953 m
(&23)[ 7.221680 2.778320 0.000000 ] xS
1 0 0 -1 251.92894 49.592125 cm
0 7.1728516 m
(!)s
CM
230.90173 46.154354 m
230.30017 45.807041 l
230.30017 60.205479 l
230.60095 60.379135 l
230.90173 60.205479 l
230.90173 46.154354 l
h
f
233.49345 47.477028 m
232.89189 47.477028 l
232.89189 58.882805 l
233.49345 58.882805 l
233.49345 47.477028 l
h
f
243.07037 39.128792 m
243.07037 38.434166 l
230.30017 45.807041 l
230.90173 46.154354 l
243.07037 39.128792 l
h
f
250.28499 43.294147 m
250.58577 42.773182 l
243.07037 38.434166 l
243.07037 39.128792 l
250.28499 43.294147 l
h
f
248.98912 45.538643 m
249.2899 45.017673 l
243.22076 41.513653 l
242.91998 42.034622 l
248.98912 45.538643 l
h
f
255.239 60.205479 m
255.84056 60.552792 l
255.84056 51.218685 l
255.239 51.218685 l
255.239 60.205479 l
h
f
243.07037 67.231041 m
243.07037 67.925667 l
255.84056 60.552792 l
255.239 60.205479 l
243.07037 67.231041 l
h
f
242.91998 64.325211 m
243.22076 64.846184 l
253.09845 59.143291 l
252.79767 58.622322 l
242.91998 64.325211 l
h
f
230.90173 60.205479 m
230.60095 60.379135 l
230.60095 60.726448 l
243.07037 67.925667 l
243.07037 67.231041 l
230.90173 60.205479 l
h
f
1 0 0 -1 196.46651 71.287437 cm
/F1.1[ 7.5 0 0 -7.5 0 0]sf
0 3.7817383 m
(%)s
/F1.1[ 10 0 0 -10 0 0]sf
2.4975586 7.3681641 m
($$&)[ 7.778320 7.778320 0.000000 ] xS
CM
222.47983 64.720558 m
222.78061 65.241524 l
230.60095 60.726448 l
230.60095 60.379135 l
230.30017 60.205479 l
222.47983 64.720558 l
h
f
1 0 0 -1 203.07027 11.904464 cm
0 7.7001953 m
('\(\)*+144/04)[ 8.330078 2.778320 5.000000 2.778320 2.778320 5.561523 5.561523 5.561523 2.778320 5.561523 0.000000 ] xS
ep
end
%%Trailer
%%EOF
